(()=>{"use strict";var n={283:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(15),o=e.n(t),A=e(645),i=e.n(A)()(o());i.push([n.id,".header__burger-icon {\r\n    display: none;\r\n    width: 18px;\r\n    height: 10px;\r\n}\r\n\r\n.header__burger-line {\r\n    width: 100%;\r\n    height: 2px;\r\n    background-color: rgb(168, 168, 168);\r\n    margin-bottom: 2px;\r\n    border-radius: 2px;\r\n}\r\n\r\n.overlay {\r\n    position: fixed;\r\n    visibility: hidden;\r\n    height: 100vh;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    z-index: 1;\r\n    background-color: transparent;\r\n    opacity: 0;\r\n\r\n}\r\n\r\n.overlay._active {\r\n    visibility: visible;\r\n    opacity: 1;\r\n}\r\n\r\n@media(max-width: 990px) {\r\n    .header__burger-icon {\r\n        display: block;\r\n    }\r\n}","",{version:3,sources:["webpack://./src/burger.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,WAAW;IACX,oCAAoC;IACpC,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,aAAa;IACb,OAAO;IACP,QAAQ;IACR,MAAM;IACN,UAAU;IACV,6BAA6B;IAC7B,UAAU;;AAEd;;AAEA;IACI,mBAAmB;IACnB,UAAU;AACd;;AAEA;IACI;QACI,cAAc;IAClB;AACJ",sourcesContent:[".header__burger-icon {\r\n    display: none;\r\n    width: 18px;\r\n    height: 10px;\r\n}\r\n\r\n.header__burger-line {\r\n    width: 100%;\r\n    height: 2px;\r\n    background-color: rgb(168, 168, 168);\r\n    margin-bottom: 2px;\r\n    border-radius: 2px;\r\n}\r\n\r\n.overlay {\r\n    position: fixed;\r\n    visibility: hidden;\r\n    height: 100vh;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    z-index: 1;\r\n    background-color: transparent;\r\n    opacity: 0;\r\n\r\n}\r\n\r\n.overlay._active {\r\n    visibility: visible;\r\n    opacity: 1;\r\n}\r\n\r\n@media(max-width: 990px) {\r\n    .header__burger-icon {\r\n        display: block;\r\n    }\r\n}"],sourceRoot:""}]);const s=i},669:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(15),o=e.n(t),A=e(645),i=e.n(A)()(o());i.push([n.id,".news {\r\n    min-height: 100%;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.news__item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 1rem auto;\r\n    margin-bottom: 1.6%;\r\n    background: #fff;\r\n    color: #333;\r\n    line-height: 1.4;\r\n    font-family: Arial, sans-serif;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n}\r\n\r\n.news__item:hover .news__meta-photo {\r\n    transform: scale(1.3) rotate(3deg);\r\n}\r\n\r\n.news__item .news__meta {\r\n    position: relative;\r\n    height: 200px;\r\n}\r\n\r\n.news__item .news__meta-photo {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-size: cover;\r\n    background-position: center;\r\n    transition: transform 0.2s;\r\n}\r\n\r\n.news__item .news__meta-details,\r\n.news__item .news__meta-details ul {\r\n    margin: auto;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n\r\n.news__item .news__meta-details {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: -120%;\r\n    margin: auto;\r\n    transition: left 0.2s;\r\n    background: rgba(0, 0, 0, 0.6);\r\n    color: #fff;\r\n    padding: 10px;\r\n    width: 100%;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.news__item .news__description {\r\n    padding: 1rem;\r\n    background: #fff;\r\n    position: relative;\r\n    z-index: 1;\r\n}\r\n\r\n.news__item .news__description h2 {\r\n    line-height: 1;\r\n    margin: 0;\r\n    font-size: 1.7rem;\r\n}\r\n\r\n.news__item .news__description h3 {\r\n    font-size: 1rem;\r\n    font-weight: 300;\r\n    text-transform: uppercase;\r\n    color: #a2a2a2;\r\n    margin-top: 5px;\r\n}\r\n\r\n.news__item .news__description .news__read-more {\r\n    text-align: right;\r\n}\r\n\r\n.news__item .news__description .news__read-more a {\r\n    color: #5ad67d;\r\n    display: inline-block;\r\n    position: relative;\r\n    text-decoration: none;\r\n    font-weight: 800;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:after {\r\n    content: '→';\r\n    margin-left: -10px;\r\n    opacity: 0;\r\n    vertical-align: middle;\r\n    transition: margin 0.3s, opacity 0.3s;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:hover:after {\r\n    margin-left: 5px;\r\n    opacity: 1;\r\n}\r\n\r\n.news__item p {\r\n    margin: 1rem 0 0;\r\n}\r\n\r\n.news__item p:first-of-type {\r\n    margin-top: 1.25rem;\r\n    position: relative;\r\n}\r\n\r\n.news__item p:first-of-type:before {\r\n    content: '';\r\n    position: absolute;\r\n    height: 5px;\r\n    background: #5ad67d;\r\n    width: 35px;\r\n    top: -0.75rem;\r\n    border-radius: 3px;\r\n}\r\n\r\n.news__item:hover .news__meta-details {\r\n    left: 0%;\r\n}\r\n\r\n@media (min-width: 640px) {\r\n    .news__item {\r\n        flex-direction: row;\r\n        max-width: 700px;\r\n    }\r\n\r\n    .news__item .news__meta {\r\n        flex-basis: 40%;\r\n        height: auto;\r\n    }\r\n\r\n    .news__item .news__description {\r\n        flex-basis: 60%;\r\n    }\r\n\r\n    .news__item .news__description:before {\r\n        -webkit-transform: skewX(-3deg);\r\n        transform: skewX(-3deg);\r\n        content: '';\r\n        background: #fff;\r\n        width: 30px;\r\n        position: absolute;\r\n        left: -10px;\r\n        top: 0;\r\n        bottom: 0;\r\n        z-index: -1;\r\n    }\r\n\r\n    .news__item.alt {\r\n        flex-direction: row-reverse;\r\n    }\r\n\r\n    .news__item.alt .news__description:before {\r\n        left: inherit;\r\n        right: -10px;\r\n        -webkit-transform: skew(3deg);\r\n        transform: skew(3deg);\r\n    }\r\n\r\n    .news__item.alt .news__meta-details {\r\n        padding-left: 25px;\r\n    }\r\n}\r\n\r\n@media(max-width: 990px) {\r\n    .news {\r\n        max-height: 100%;\r\n    }\r\n}","",{version:3,sources:["webpack://./src/components/view/news/news.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;IACjB,mBAAmB;IACnB,gBAAgB;IAChB,WAAW;IACX,gBAAgB;IAChB,8BAA8B;IAC9B,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;IACP,sBAAsB;IACtB,2BAA2B;IAC3B,0BAA0B;AAC9B;;AAEA;;IAEI,YAAY;IACZ,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,SAAS;IACT,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,8BAA8B;IAC9B,WAAW;IACX,aAAa;IACb,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,cAAc;IACd,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,yBAAyB;IACzB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,kBAAkB;IAClB,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,UAAU;IACV,sBAAsB;IACtB,qCAAqC;AACzC;;AAEA;IACI,gBAAgB;IAChB,UAAU;AACd;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,WAAW;IACX,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,QAAQ;AACZ;;AAEA;IACI;QACI,mBAAmB;QACnB,gBAAgB;IACpB;;IAEA;QACI,eAAe;QACf,YAAY;IAChB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,+BAA+B;QAC/B,uBAAuB;QACvB,WAAW;QACX,gBAAgB;QAChB,WAAW;QACX,kBAAkB;QAClB,WAAW;QACX,MAAM;QACN,SAAS;QACT,WAAW;IACf;;IAEA;QACI,2BAA2B;IAC/B;;IAEA;QACI,aAAa;QACb,YAAY;QACZ,6BAA6B;QAC7B,qBAAqB;IACzB;;IAEA;QACI,kBAAkB;IACtB;AACJ;;AAEA;IACI;QACI,gBAAgB;IACpB;AACJ",sourcesContent:[".news {\r\n    min-height: 100%;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.news__item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 1rem auto;\r\n    margin-bottom: 1.6%;\r\n    background: #fff;\r\n    color: #333;\r\n    line-height: 1.4;\r\n    font-family: Arial, sans-serif;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n}\r\n\r\n.news__item:hover .news__meta-photo {\r\n    transform: scale(1.3) rotate(3deg);\r\n}\r\n\r\n.news__item .news__meta {\r\n    position: relative;\r\n    height: 200px;\r\n}\r\n\r\n.news__item .news__meta-photo {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-size: cover;\r\n    background-position: center;\r\n    transition: transform 0.2s;\r\n}\r\n\r\n.news__item .news__meta-details,\r\n.news__item .news__meta-details ul {\r\n    margin: auto;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n\r\n.news__item .news__meta-details {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: -120%;\r\n    margin: auto;\r\n    transition: left 0.2s;\r\n    background: rgba(0, 0, 0, 0.6);\r\n    color: #fff;\r\n    padding: 10px;\r\n    width: 100%;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.news__item .news__description {\r\n    padding: 1rem;\r\n    background: #fff;\r\n    position: relative;\r\n    z-index: 1;\r\n}\r\n\r\n.news__item .news__description h2 {\r\n    line-height: 1;\r\n    margin: 0;\r\n    font-size: 1.7rem;\r\n}\r\n\r\n.news__item .news__description h3 {\r\n    font-size: 1rem;\r\n    font-weight: 300;\r\n    text-transform: uppercase;\r\n    color: #a2a2a2;\r\n    margin-top: 5px;\r\n}\r\n\r\n.news__item .news__description .news__read-more {\r\n    text-align: right;\r\n}\r\n\r\n.news__item .news__description .news__read-more a {\r\n    color: #5ad67d;\r\n    display: inline-block;\r\n    position: relative;\r\n    text-decoration: none;\r\n    font-weight: 800;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:after {\r\n    content: '→';\r\n    margin-left: -10px;\r\n    opacity: 0;\r\n    vertical-align: middle;\r\n    transition: margin 0.3s, opacity 0.3s;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:hover:after {\r\n    margin-left: 5px;\r\n    opacity: 1;\r\n}\r\n\r\n.news__item p {\r\n    margin: 1rem 0 0;\r\n}\r\n\r\n.news__item p:first-of-type {\r\n    margin-top: 1.25rem;\r\n    position: relative;\r\n}\r\n\r\n.news__item p:first-of-type:before {\r\n    content: '';\r\n    position: absolute;\r\n    height: 5px;\r\n    background: #5ad67d;\r\n    width: 35px;\r\n    top: -0.75rem;\r\n    border-radius: 3px;\r\n}\r\n\r\n.news__item:hover .news__meta-details {\r\n    left: 0%;\r\n}\r\n\r\n@media (min-width: 640px) {\r\n    .news__item {\r\n        flex-direction: row;\r\n        max-width: 700px;\r\n    }\r\n\r\n    .news__item .news__meta {\r\n        flex-basis: 40%;\r\n        height: auto;\r\n    }\r\n\r\n    .news__item .news__description {\r\n        flex-basis: 60%;\r\n    }\r\n\r\n    .news__item .news__description:before {\r\n        -webkit-transform: skewX(-3deg);\r\n        transform: skewX(-3deg);\r\n        content: '';\r\n        background: #fff;\r\n        width: 30px;\r\n        position: absolute;\r\n        left: -10px;\r\n        top: 0;\r\n        bottom: 0;\r\n        z-index: -1;\r\n    }\r\n\r\n    .news__item.alt {\r\n        flex-direction: row-reverse;\r\n    }\r\n\r\n    .news__item.alt .news__description:before {\r\n        left: inherit;\r\n        right: -10px;\r\n        -webkit-transform: skew(3deg);\r\n        transform: skew(3deg);\r\n    }\r\n\r\n    .news__item.alt .news__meta-details {\r\n        padding-left: 25px;\r\n    }\r\n}\r\n\r\n@media(max-width: 990px) {\r\n    .news {\r\n        max-height: 100%;\r\n    }\r\n}"],sourceRoot:""}]);const s=i},501:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(15),o=e.n(t),A=e(645),i=e.n(A)()(o());i.push([n.id,".sources {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow-y: scroll;\r\n    overflow-x: hidden;\r\n    align-items: center;\r\n    font: 300 1em 'Fira Sans', sans-serif;\r\n    background-color: #17181c;\r\n\r\n    transition: all ease 0.7s;\r\n}\r\n\r\n.source__item {\r\n    background: none;\r\n    border: 2px solid #30c5ff;\r\n    font: inherit;\r\n    line-height: 1;\r\n    margin: 0.5em;\r\n    padding: 10px;\r\n    color: #70d6ff;\r\n    transition: 0.25s;\r\n    cursor: pointer;\r\n    width: 200px;\r\n}\r\n\r\n.source__item:hover,\r\n.source__item:focus {\r\n    border-color: #3fcc59;\r\n    color: #69db7e;\r\n    box-shadow: 0 0.5em 0.5em -0.4em #3fcc59;\r\n    transform: translateY(-0.25em);\r\n}\r\n\r\n.source__item-name {\r\n    font-weight: 400;\r\n    white-space: nowrap;\r\n}\r\n\r\n@media(max-width: 990px) {\r\n    .sources {\r\n        position: fixed;\r\n        top: 0;\r\n        left: -100%;\r\n        width: 250px;\r\n        height: 100%;\r\n        z-index: 2;\r\n    }\r\n\r\n    .sources._active {\r\n        left: 0%;\r\n    }\r\n}","",{version:3,sources:["webpack://./src/components/view/sources/sources.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;IACjB,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,mBAAmB;IACnB,qCAAqC;IACrC,yBAAyB;;IAEzB,yBAAyB;AAC7B;;AAEA;IACI,gBAAgB;IAChB,yBAAyB;IACzB,aAAa;IACb,cAAc;IACd,aAAa;IACb,aAAa;IACb,cAAc;IACd,iBAAiB;IACjB,eAAe;IACf,YAAY;AAChB;;AAEA;;IAEI,qBAAqB;IACrB,cAAc;IACd,wCAAwC;IACxC,8BAA8B;AAClC;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI;QACI,eAAe;QACf,MAAM;QACN,WAAW;QACX,YAAY;QACZ,YAAY;QACZ,UAAU;IACd;;IAEA;QACI,QAAQ;IACZ;AACJ",sourcesContent:[".sources {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow-y: scroll;\r\n    overflow-x: hidden;\r\n    align-items: center;\r\n    font: 300 1em 'Fira Sans', sans-serif;\r\n    background-color: #17181c;\r\n\r\n    transition: all ease 0.7s;\r\n}\r\n\r\n.source__item {\r\n    background: none;\r\n    border: 2px solid #30c5ff;\r\n    font: inherit;\r\n    line-height: 1;\r\n    margin: 0.5em;\r\n    padding: 10px;\r\n    color: #70d6ff;\r\n    transition: 0.25s;\r\n    cursor: pointer;\r\n    width: 200px;\r\n}\r\n\r\n.source__item:hover,\r\n.source__item:focus {\r\n    border-color: #3fcc59;\r\n    color: #69db7e;\r\n    box-shadow: 0 0.5em 0.5em -0.4em #3fcc59;\r\n    transform: translateY(-0.25em);\r\n}\r\n\r\n.source__item-name {\r\n    font-weight: 400;\r\n    white-space: nowrap;\r\n}\r\n\r\n@media(max-width: 990px) {\r\n    .sources {\r\n        position: fixed;\r\n        top: 0;\r\n        left: -100%;\r\n        width: 250px;\r\n        height: 100%;\r\n        z-index: 2;\r\n    }\r\n\r\n    .sources._active {\r\n        left: 0%;\r\n    }\r\n}"],sourceRoot:""}]);const s=i},767:(n,r,e)=>{e.d(r,{Z:()=>c});var t=e(15),o=e.n(t),A=e(645),i=e.n(A),s=e(283),a=i()(o());a.i(s.Z),a.push([n.id,"body {\r\n    color: #fff;\r\n    background: #17181c;\r\n    font-family: sans-serif;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n}\r\n\r\nheader {\r\n    padding: 10px 30px;\r\n    flex: 0 0 auto;\r\n    height: 15%;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\nheader h1 {\r\n    font-size: 40px;\r\n    font-weight: 800;\r\n    margin-left: 20px;\r\n}\r\n\r\n\r\nmain {\r\n    flex: 1 0 auto;\r\n    max-height: 75%;\r\n    display: grid;\r\n    grid-template-columns: 250px 1fr;\r\n}\r\n\r\nfooter {\r\n    flex: 0 0 auto;\r\n    height: 10%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\nfooter .copyright {\r\n    font-size: 14px;\r\n    color: #333;\r\n    text-align: center;\r\n}\r\nfooter .copyright a {\r\n    color: #444;\r\n}\r\nfooter .copyright a:hover {\r\n    color: #555;\r\n}\r\nfooter .copyright:before {\r\n    content: '©';\r\n}\r\n\r\n::-webkit-scrollbar {\r\n    width: 3px; \r\n    height: 8px;\r\n    background-color: #17181c;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n    background-color: rgb(175, 175, 175);\r\n    border-radius: 9em;\r\n    box-shadow: inset 1px 1px 10px #f3faf7;\r\n}\r\n\r\n@media(max-width: 990px) {\r\n    body {\r\n        position: fixed;\r\n        width: 100vw;\r\n    }\r\n    main {\r\n        display: block;\r\n    }\r\n\r\n    header h1 {\r\n        margin-left: 20px;\r\n    }\r\n}","",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,cAAc;IACd,WAAW;IACX,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,iBAAiB;AACrB;;;AAGA;IACI,cAAc;IACd,eAAe;IACf,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;AACA;IACI,eAAe;IACf,WAAW;IACX,kBAAkB;AACtB;AACA;IACI,WAAW;AACf;AACA;IACI,WAAW;AACf;AACA;IACI,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,oCAAoC;IACpC,kBAAkB;IAClB,sCAAsC;AAC1C;;AAEA;IACI;QACI,eAAe;QACf,YAAY;IAChB;IACA;QACI,cAAc;IAClB;;IAEA;QACI,iBAAiB;IACrB;AACJ",sourcesContent:["@import url(./burger.css);\r\n\r\nbody {\r\n    color: #fff;\r\n    background: #17181c;\r\n    font-family: sans-serif;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n}\r\n\r\nheader {\r\n    padding: 10px 30px;\r\n    flex: 0 0 auto;\r\n    height: 15%;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\nheader h1 {\r\n    font-size: 40px;\r\n    font-weight: 800;\r\n    margin-left: 20px;\r\n}\r\n\r\n\r\nmain {\r\n    flex: 1 0 auto;\r\n    max-height: 75%;\r\n    display: grid;\r\n    grid-template-columns: 250px 1fr;\r\n}\r\n\r\nfooter {\r\n    flex: 0 0 auto;\r\n    height: 10%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\nfooter .copyright {\r\n    font-size: 14px;\r\n    color: #333;\r\n    text-align: center;\r\n}\r\nfooter .copyright a {\r\n    color: #444;\r\n}\r\nfooter .copyright a:hover {\r\n    color: #555;\r\n}\r\nfooter .copyright:before {\r\n    content: '©';\r\n}\r\n\r\n::-webkit-scrollbar {\r\n    width: 3px; \r\n    height: 8px;\r\n    background-color: #17181c;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n    background-color: rgb(175, 175, 175);\r\n    border-radius: 9em;\r\n    box-shadow: inset 1px 1px 10px #f3faf7;\r\n}\r\n\r\n@media(max-width: 990px) {\r\n    body {\r\n        position: fixed;\r\n        width: 100vw;\r\n    }\r\n    main {\r\n        display: block;\r\n    }\r\n\r\n    header h1 {\r\n        margin-left: 20px;\r\n    }\r\n}"],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e=n(r);return r[2]?"@media ".concat(r[2]," {").concat(e,"}"):e})).join("")},r.i=function(n,e,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var A=0;A<this.length;A++){var i=this[A][0];null!=i&&(o[i]=!0)}for(var s=0;s<n.length;s++){var a=[].concat(n[s]);t&&o[a[0]]||(e&&(a[2]?a[2]="".concat(e," and ").concat(a[2]):a[2]=e),r.push(a))}},r}},15:n=>{function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}n.exports=function(n){var e,t,o=(t=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,r){var e=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=e){var t,o,A=[],i=!0,s=!1;try{for(e=e.call(n);!(i=(t=e.next()).done)&&(A.push(t.value),!r||A.length!==r);i=!0);}catch(n){s=!0,o=n}finally{try{i||null==e.return||e.return()}finally{if(s)throw o}}return A}}(e,t)||function(n,e){if(n){if("string"==typeof n)return r(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?r(n,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),A=o[1],i=o[3];if(!i)return A;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(a," */"),l=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[A].concat(l).concat([c]).join("\n")}return[A].join("\n")}},379:(n,r,e)=>{var t,o=function(){var n={};return function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[r]=e}return n[r]}}(),A=[];function i(n){for(var r=-1,e=0;e<A.length;e++)if(A[e].identifier===n){r=e;break}return r}function s(n,r){for(var e={},t=[],o=0;o<n.length;o++){var s=n[o],a=r.base?s[0]+r.base:s[0],c=e[a]||0,l="".concat(a," ").concat(c);e[a]=c+1;var d=i(l),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(A[d].references++,A[d].updater(p)):A.push({identifier:l,updater:u(p,r),references:1}),t.push(l)}return t}function a(n){var r=document.createElement("style"),t=n.attributes||{};if(void 0===t.nonce){var A=e.nc;A&&(t.nonce=A)}if(Object.keys(t).forEach((function(n){r.setAttribute(n,t[n])})),"function"==typeof n.insert)n.insert(r);else{var i=o(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(r)}return r}var c,l=(c=[],function(n,r){return c[n]=r,c.filter(Boolean).join("\n")});function d(n,r,e,t){var o=e?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(n.styleSheet)n.styleSheet.cssText=l(r,o);else{var A=document.createTextNode(o),i=n.childNodes;i[r]&&n.removeChild(i[r]),i.length?n.insertBefore(A,i[r]):n.appendChild(A)}}function p(n,r,e){var t=e.css,o=e.media,A=e.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),A&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(A))))," */")),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}var m=null,f=0;function u(n,r){var e,t,o;if(r.singleton){var A=f++;e=m||(m=a(r)),t=d.bind(null,e,A,!1),o=d.bind(null,e,A,!0)}else e=a(r),t=p.bind(null,e,r),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return t(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;t(n=r)}else o()}}n.exports=function(n,r){(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var e=s(n=n||[],r);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var t=0;t<e.length;t++){var o=i(e[t]);A[o].references--}for(var a=s(n,r),c=0;c<e.length;c++){var l=i(e[c]);0===A[l].references&&(A[l].updater(),A.splice(l,1))}e=a}}}}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var A=r[t]={id:t,exports:{}};return n[t](A,A.exports,e),A.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{const n=class{constructor(n,r){this.baseLink=n,this.options=r}getResp({endpoint:n,options:r={}},e=(()=>{console.error("No callback for GET response")})){this.load("GET",n,e,r)}errorHandler(n){if(!n.ok)throw 401!==n.status&&404!==n.status||console.log(`Sorry, but there is ${n.status} error: ${n.statusText}`),Error(n.statusText);return n}makeUrl(n,r){const e=Object.assign(Object.assign({},this.options),n);let t=`${this.baseLink}${r}?`;return Object.keys(e).forEach((n=>{e[n]&&(t+=`${n}=${e[n]}&`)})),t.slice(0,-1)}load(n,r,e,t={}){fetch(this.makeUrl(t,r),{method:n}).then(this.errorHandler).then((n=>n.json())).then((n=>e(n))).catch((n=>console.error(n)))}},r=class extends n{constructor(){super("https://nodenews.herokuapp.com/",{apiKey:"07b9d49d4ea94d17a47ddc3c1474eb68"})}},t=class extends r{getSources(n){super.getResp({endpoint:"sources"},n)}getNews(n,r){let e=n.target;const t=n.currentTarget;for(;e!==t;){if(e&&e.classList.contains("source__item")){const n=e.getAttribute("data-source-id");return void(t.getAttribute("data-source")!==n&&("string"==typeof n&&t.setAttribute("data-source",n),super.getResp({endpoint:"everything",options:{sources:n}},r)))}e=e.parentNode}}};var o=e(379),A=e.n(o),i=e(669);A()(i.Z,{insert:"head",singleton:!1}),i.Z.locals;var s=e(501);A()(s.Z,{insert:"head",singleton:!1}),s.Z.locals;class a{constructor(){this.news=new class{draw(n){const r=n.length>=10?n.filter(((n,r)=>r<10)):n,e=document.createDocumentFragment(),t=document.querySelector("#newsItemTemp");r.forEach(((n,r)=>{if(null!==t){const o=t.content.cloneNode(!0),A=o.querySelector(".news__item");r%2&&A&&A.classList.add("alt");const i=o.querySelector(".news__meta-photo");i&&(i.style.backgroundImage=`url(${n.urlToImage||"img/news_placeholder.jpg"})`);const s=o.querySelector(".news__meta-author");s&&(s.textContent=n.author||n.source.name);const a=o.querySelector(".news__meta-date");a&&(a.textContent=n.publishedAt.slice(0,10).split("-").reverse().join("-"));const c=o.querySelector(".news__description-title");c&&(c.textContent=n.title);const l=o.querySelector(".news__description-source");l&&(l.textContent=n.source.name);const d=o.querySelector(".news__description-content");d&&(d.textContent=n.description);const p=o.querySelector(".news__read-more a");p&&p.setAttribute("href",n.url),e.append(o)}}));const o=document.querySelector(".news");o&&(o.innerHTML="",o.appendChild(e))}},this.sources=new class{draw(n){const r=document.createDocumentFragment(),e=document.querySelector("#sourceItemTemp");e&&n.forEach((n=>{const t=e.content.cloneNode(!0),o=t.querySelector(".source__item-name");o&&(o.textContent=n.name);const A=t.querySelector(".source__item");A&&A.setAttribute("data-source-id",n.id),r.append(t)}));const t=document.querySelector(".sources");t&&t.append(r)}}}drawNews(n){const r=(null==n?void 0:n.articles)?null==n?void 0:n.articles:[];this.news.draw(r)}drawSources(n){const r=(null==n?void 0:n.sources)?null==n?void 0:n.sources:[];this.sources.draw(r)}}var c=e(767);A()(c.Z,{insert:"head",singleton:!1}),c.Z.locals,(new class{constructor(){this.controller=new t,this.view=new a}start(){const n=document.querySelector(".sources");n&&n.addEventListener("click",(n=>this.controller.getNews(n,(n=>{n&&this.view.drawNews(n)})))),this.controller.getSources((n=>{n&&this.view.drawSources(n)}))}}).start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,